//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors/num_word.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&sk { release-after-ms = <900>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_lpar {
            bindings = <&morph_lpar_lt>;
            key-positions = <16 17>;
            timeout-ms = <50>;
            layers = <0>;
            require-prior-idle-ms = <150>;
        };

        combo_rpar {
            bindings = <&morph_rpar_gt>;
            key-positions = <17 18>;
            timeout-ms = <50>;
            layers = <0>;
            require-prior-idle-ms = <150>;
        };

        combo_lbkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <6 7>;
            timeout-ms = <50>;
            layers = <0>;
            require-prior-idle-ms = <150>;
        };

        combo_rbkt {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <7 8>;
            timeout-ms = <50>;
            layers = <0>;
            require-prior-idle-ms = <150>;
        };

        combo_lbrc {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <27 28>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_rbrc {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <28 29>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_eq {
            bindings = <&kp EQUAL>;
            key-positions = <26 15>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <16 27>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <17 28>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_ast {
            bindings = <&kp ASTERISK>;
            key-positions = <18 29>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <26 27>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <23 22>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_paste {
            bindings = <&kp LC(V)>;
            key-positions = <23 24>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_bslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <15 16>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_grave {
            bindings = <&kp GRAVE>;
            key-positions = <5 6>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };
    };

    behaviors {
        hm_l: hm_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 35 36 37 32 33 34>;
            hold-trigger-on-release;
        };

        hm_r: hm_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <35 36 37 32 33 34 0 1 2 3 4 10 11 12 13 14 21 22 23 24 25>;
            hold-trigger-on-release;
        };

        smart_shift: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_dance: num_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "NUM_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&num_word 1>, <&sl 1>;
        };

        smart_num: smart_num {
            compatible = "zmk,behavior-hold-tap";
            label = "SMART_NUM";
            bindings = <&mo>, <&num_dance>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
        };

        morph_lpar_lt: morph_lpar_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_LPAR_LT";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        morph_rpar_gt: morph_rpar_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_RPAR_GT";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        tap_mo_l: tap_mo_l {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_MO_L";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 21 22 23 24 25 5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 35 36 37>;
            hold-trigger-on-release;
        };

        tap_mo_r: tap_mo_r {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_MO_R";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 21 22 23 24 25 5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 32 33 34>;
            hold-trigger-on-release;
        };

        morph_backspace_del: morph_backspace_del {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_BACKSPACE_DEL";
            bindings = <&kp BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     F     ┃     P     ┃     G     ┃   ┃     J     ┃     L     ┃     U     ┃     Y     ┃     ;     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     R     ┃     S     ┃     T     ┃     D     ┃   ┃     H     ┃     N     ┃     E     ┃     I     ┃     O     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃     Q     ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     K     ┃     M     ┃     ,     ┃     .     ┃     /     ┃     \     ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃    DEL    ┃    TAB    ┃    SPC    ┃   ┃   ENTER   ┃           ┃   BSPC    ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
            &kp Q         &kp W         &kp E            &kp R           &kp T              &kp Y              &kp U                 &kp I           &kp O         &kp P
            &hm_l LGUI A  &hm_l LALT S  &hm_l LSHIFT D   &hm_l LCTRL F   &kp G              &kp H              &hm_r RCTRL J         &hm_r RSHIFT K  &hm_r RALT L  &hm_r RGUI SEMICOLON
&kp ESCAPE  &kp Z         &kp X         &kp C            &kp V           &kp B              &kp N              &kp M                 &kp COMMA       &kp DOT       &kp SLASH             &kp APOSTROPHE
                                        &tap_mo_l 3 TAB  &smart_num 1 0  &tap_mo_l 2 SPACE  &tap_mo_r 4 ENTER  &morph_backspace_del  &smart_shift
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        num {
            bindings = <
        &trans    &trans    &trans      &trans     &trans  &trans      &kp N7  &kp N8          &kp N9  &trans
        &kp LGUI  &kp LALT  &kp LSHIFT  &kp LCTRL  &trans  &trans      &kp N4  &kp N5          &kp N6  &trans
&trans  &trans    &trans    &trans      &trans     &trans  &trans      &kp N1  &kp N2          &kp N3  &trans  &trans
                            &trans      &trans     &trans  &kp PERIOD  &kp N0  &kp UNDERSCORE
            >;
        };

        nav {
            bindings = <
        &trans    &trans    &trans      &trans     &trans  &trans      &trans    &trans         &trans       &trans
        &kp LGUI  &kp LALT  &kp LSHIFT  &kp LCTRL  &trans  &kp CAPS    &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT
&trans  &trans    &trans    &trans      &trans     &trans  &kp INSERT  &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &trans
                            &trans      &trans     &trans  &trans      &trans    &trans
            >;
        };

        fun {
            bindings = <
        &kp F7  &kp F8  &kp F9  &kp F10  &kp PRINTSCREEN  &trans  &trans     &trans      &trans    &trans
        &kp F4  &kp F5  &kp F6  &kp F11  &kp CAPSLOCK     &trans  &kp RCTRL  &kp RSHIFT  &kp RALT  &kp RGUI
&trans  &kp F1  &kp F2  &kp F3  &kp F12  &kp PAUSE_BREAK  &trans  &trans     &trans      &trans    &trans    &trans
                        &trans  &trans   &trans           &trans  &trans     &trans
            >;
        };

        media {
            bindings = <
             &bt BT_SEL 0     &bt BT_SEL 1       &bt BT_SEL 2        &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans             &trans      &trans    &trans
             &kp C_VOLUME_UP  &kp C_VOLUME_DOWN  &kp C_MUTE          &kp C_PLAY    &bt BT_CLR    &trans  &kp RIGHT_CONTROL  &kp RSHIFT  &kp RALT  &kp RGUI
&bootloader  &kp C_NEXT       &kp C_PREV         &kp C_FAST_FORWARD  &kp C_REWIND  &trans        &trans  &trans             &trans      &trans    &trans    &bootloader
                                                 &trans              &trans        &trans        &trans  &trans             &trans
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
    };
};
